# -*- coding: utf-8 -*-
"""recommend_surprise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S98L9D98M1mKnBK9GZ-6Vet5ZROKANbE
"""

!pip install surprise

import os, codecs, gc
import pandas as pd
import codecs
from surprise.model_selection import cross_validate
from surprise.model_selection import KFold
from surprise.model_selection import train_test_split
from surprise import BaselineOnly
from surprise import KNNBasic
from surprise import KNNWithMeans
from surprise import KNNBaseline
from surprise import SVD
from surprise import SVDpp
from surprise import NMF
from surprise import CoClustering
from surprise import Dataset
from surprise import Reader
from surprise import accuracy

from google.colab import drive
drive.mount('/content/drive')
input_dir = "drive/My Drive/input/"

"""# Load data-file"""

# users
with codecs.open(input_dir + "BX-Users.csv", "r", "utf8", "ignore") as file:
    user = pd.read_csv(file, delimiter=";")

# items
col_name = ["ISBN", "Title", "Author", "Year", "Publisher", "URL-S", "URL-M", "URL-L"]
with codecs.open(input_dir + "BX-Books.csv", "r", "utf8", "ignore") as file:
    item = pd.read_csv(file, delimiter=";", names=col_name, skiprows=1, converters={"Year" : str})

# rating
with codecs.open(input_dir + "BX-Book-Ratings.csv", "r", "utf8", "ignore") as file:
    rating = pd.read_csv(file, delimiter=";")

"""# data cleaning"""

rating_author = pd.merge(rating, item, how='left', on='ISBN')

rating_author = rating_author.iloc[:, [0, 4, 2, 5]]
rating_author.dropna(inplace=True)
rating_author = rating_author[rating_author.Year.str.contains(pat='\d', regex=True)].iloc[:, 0:3]

"""# arrange dataset"""

data = rating_author.groupby(['User-ID', 'Author'])["Book-Rating"].agg(['mean']).reset_index()
data.sort_values(by=['User-ID', 'Author'], inplace=True)
data.columns = ["userID", "author", "raw_ratings"]

## binning raw_ratings
data.raw_ratings = data.raw_ratings.apply(lambda x : 0 if x == 0 else (1 if x in [1,2,3,4]  else (2 if x in[5, 6, 7] else 3)))

data.raw_ratings = data.raw_ratings.astype("int")

"""# make dataset for surprise"""

reader = Reader(rating_scale=(0, 10))
data = Dataset.load_from_df(data[["userID", "author", "raw_ratings"]], reader)

del user, item, rating, rating_author
gc.collect()

"""# train by surprise"""

kf = KFold(random_state=0, n_splits=3)

classes = (SVD, SVDpp, NMF, KNNBaseline, BaselineOnly, CoClustering)
for idx, klass in enumerate(classes):
  print(classes[idx])
  for trainset, testset in kf.split(data):
    # train and test algorithm.
    algo = klass()
    algo.fit(trainset)
    predictions = algo.test(testset)

    # Compute and print Root Mean Squared Error
    accuracy.rmse(predictions, verbose=True)

classes[0]

